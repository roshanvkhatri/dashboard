var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { ChangeDetectorRef, Component, DoCheck, ElementRef, Input, KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';
import { SvgIconRegistryService } from './svg-icon-registry.service';
var SvgIconComponent = /** @class */ (function () {
    function SvgIconComponent(element, differs, renderer, iconReg, cdr) {
        this.element = element;
        this.differs = differs;
        this.renderer = renderer;
        this.iconReg = iconReg;
        this.cdr = cdr;
        this.stretch = false;
        this.applyClass = false;
        /** @deprecated since 9.1.0 */
        this.applyCss = false;
        this.loaded = false;
    }
    Object.defineProperty(SvgIconComponent.prototype, "svgStyle", {
        // Adapted from ngStyle
        set: function (v) {
            this._svgStyle = v;
            if (!this.differ && v) {
                this.differ = this.differs.find(v).create();
            }
        },
        enumerable: true,
        configurable: true
    });
    SvgIconComponent.prototype.ngOnInit = function () {
        this.init();
    };
    SvgIconComponent.prototype.ngOnDestroy = function () {
        this.destroy();
    };
    SvgIconComponent.prototype.ngOnChanges = function (changeRecord) {
        if (changeRecord.src || changeRecord.name) {
            if (this.loaded) {
                this.destroy();
            }
            this.init();
        }
        if (changeRecord.stretch) {
            this.stylize();
        }
        if (changeRecord.applyClass) {
            if (this.applyClass) {
                this.setClass(null, this.klass);
            }
            else {
                this.setClass(this.klass, null);
            }
        }
        if (changeRecord.svgClass) {
            this.setClass(changeRecord.svgClass.previousValue, changeRecord.svgClass.currentValue);
        }
        if (changeRecord.klass) {
            if (this.applyClass) {
                this.setClass(changeRecord.klass.previousValue, changeRecord.klass.currentValue);
            }
            else {
                this.setClass(changeRecord.klass.previousValue, null);
            }
        }
        if (changeRecord.viewBox) {
            if (this.loaded) {
                this.destroy();
            }
            this.init();
        }
        if (changeRecord.applyCss) {
            console.warn('applyCss deprecated since 9.1.0, will be removed in 10.0.0');
            console.warn('use applyClass instead');
        }
    };
    SvgIconComponent.prototype.ngDoCheck = function () {
        if (this.svg && this.differ) {
            var changes = this.differ.diff(this._svgStyle);
            if (changes) {
                this.applyChanges(changes);
            }
        }
    };
    SvgIconComponent.prototype.init = function () {
        if (this.name) {
            this.icnSub = this.iconReg.getSvgByName(this.name).subscribe(this.initSvg.bind(this));
        }
        else if (this.src) {
            this.icnSub = this.iconReg.loadSvg(this.src).subscribe(this.initSvg.bind(this));
        }
        else {
            var elem = this.element.nativeElement;
            elem.innerHTML = '';
            this.cdr.markForCheck();
        }
    };
    SvgIconComponent.prototype.initSvg = function (svg) {
        if (!this.loaded) {
            this.setSvg(svg);
            this.resetDiffer();
        }
    };
    SvgIconComponent.prototype.destroy = function () {
        this.svg = undefined;
        this.differ = undefined;
        this.loaded = false;
        if (this.icnSub) {
            this.icnSub.unsubscribe();
        }
    };
    SvgIconComponent.prototype.resetDiffer = function () {
        if (this._svgStyle && !this.differ) {
            this.differ = this.differs.find(this._svgStyle).create();
        }
    };
    SvgIconComponent.prototype.setSvg = function (svg) {
        if (!this.loaded && svg) {
            this.svg = svg;
            var icon = svg.cloneNode(true);
            var elem = this.element.nativeElement;
            this.copyNgContentAttribute(elem, icon);
            if (this.klass && this.applyClass) {
                this.renderer.setAttribute(icon, 'class', this.klass);
            }
            if (this.svgClass) {
                this.renderer.setAttribute(icon, 'class', this.svgClass);
            }
            if (this.viewBox) {
                if (this.viewBox === 'auto') {
                    // Attempt to convert height & width to a viewBox.
                    var w = icon.getAttribute('width');
                    var h = icon.getAttribute('height');
                    if (h && w) {
                        var vb = "0 0 " + w + " " + h;
                        this.renderer.setAttribute(icon, 'viewBox', vb);
                        this.renderer.removeAttribute(icon, 'width');
                        this.renderer.removeAttribute(icon, 'height');
                    }
                }
                else if (this.viewBox !== '') {
                    this.renderer.setAttribute(icon, 'viewBox', this.viewBox);
                    this.renderer.removeAttribute(icon, 'width');
                    this.renderer.removeAttribute(icon, 'height');
                }
            }
            elem.innerHTML = '';
            this.renderer.appendChild(elem, icon);
            this.loaded = true;
            this.stylize();
            this.cdr.markForCheck();
        }
    };
    SvgIconComponent.prototype.copyNgContentAttribute = function (hostElem, icon) {
        var attributes = hostElem.attributes;
        var len = attributes.length;
        for (var i = 0; i < len; i += 1) {
            var attribute = attributes.item(i);
            if (attribute.name.startsWith('_ngcontent')) {
                this.setNgContentAttribute(icon, attribute.name);
                break;
            }
        }
    };
    SvgIconComponent.prototype.setNgContentAttribute = function (parent, attributeName) {
        this.renderer.setAttribute(parent, attributeName, '');
        var len = parent.childNodes.length;
        for (var i = 0; i < len; i += 1) {
            var child = parent.childNodes[i];
            if (child instanceof Element) {
                this.setNgContentAttribute(child, attributeName);
            }
        }
    };
    SvgIconComponent.prototype.stylize = function () {
        if (this.svg) {
            var svg = this.element.nativeElement.firstChild;
            if (this.stretch === true) {
                this.renderer.setAttribute(svg, 'preserveAspectRatio', 'none');
            }
            else if (this.stretch === false) {
                this.renderer.removeAttribute(svg, 'preserveAspectRatio');
            }
        }
    };
    SvgIconComponent.prototype.applyChanges = function (changes) {
        var _this = this;
        changes.forEachRemovedItem(function (record) { return _this.setStyle(record.key, null); });
        changes.forEachAddedItem(function (record) { return _this.setStyle(record.key, record.currentValue); });
        changes.forEachChangedItem(function (record) { return _this.setStyle(record.key, record.currentValue); });
    };
    SvgIconComponent.prototype.setStyle = function (nameAndUnit, value) {
        var _a = __read(nameAndUnit.split('.'), 2), name = _a[0], unit = _a[1];
        value = value !== null && unit ? "" + value + unit : value;
        var svg = this.element.nativeElement.firstChild;
        if (value !== null) {
            this.renderer.setStyle(svg, name, value);
        }
        else {
            this.renderer.removeStyle(svg, name);
        }
    };
    SvgIconComponent.prototype.setClass = function (previous, current) {
        var e_1, _a;
        var svg = this.element.nativeElement.firstChild;
        if (svg) {
            if (previous) {
                this.renderer.removeClass(svg, previous);
            }
            if (current) {
                var klasses = current.split(' ');
                try {
                    for (var klasses_1 = __values(klasses), klasses_1_1 = klasses_1.next(); !klasses_1_1.done; klasses_1_1 = klasses_1.next()) {
                        var k = klasses_1_1.value;
                        this.renderer.addClass(svg, k);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (klasses_1_1 && !klasses_1_1.done && (_a = klasses_1.return)) _a.call(klasses_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        }
    };
    SvgIconComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: KeyValueDiffers },
        { type: Renderer2 },
        { type: SvgIconRegistryService },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SvgIconComponent.prototype, "src", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SvgIconComponent.prototype, "name", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SvgIconComponent.prototype, "stretch", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SvgIconComponent.prototype, "applyClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SvgIconComponent.prototype, "applyCss", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SvgIconComponent.prototype, "svgClass", void 0);
    __decorate([
        Input('class'),
        __metadata("design:type", String)
    ], SvgIconComponent.prototype, "klass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SvgIconComponent.prototype, "viewBox", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], SvgIconComponent.prototype, "svgStyle", null);
    SvgIconComponent = __decorate([
        Component({
            selector: 'svg-icon',
            template: '<ng-content></ng-content>'
        }),
        __metadata("design:paramtypes", [ElementRef,
            KeyValueDiffers,
            Renderer2,
            SvgIconRegistryService,
            ChangeDetectorRef])
    ], SvgIconComponent);
    return SvgIconComponent;
}());
export { SvgIconComponent };
//# sourceMappingURL=data:application/json;base64,